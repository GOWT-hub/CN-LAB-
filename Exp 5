#include <stdio.h>
#define MAX 30

int a[MAX][MAX], n, marked[MAX], k = -1, edges = 0, sink[MAX][MAX];
int visited(int);
void broadcast();

int main() {
    int i, j, cv, start = 0, end = 0, distance = 0, min;
    printf("Enter No. of vertices: ");
    scanf("%d", &n);
    printf("\nEnter adjacency matrix\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("\na[%d][%d]=", i, j);
            scanf("%d", &a[i][j]);
        }
    }

    // Initialize the sink matrix to zero
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            sink[i][j] = 0;
        }
    }

    while (edges < n - 1) {
        if (edges == 0) {
            for (i = 0; i < n; i++) {
                for (j = 0; j < n; j++) {
                    if (a[i][j] == 1) {
                        start = i;
                        end = j;
                        break;
                    }
                }
                if (j < n) break;
            }
            marked[++k] = start;
            marked[++k] = end;
        } else {
            min = MAX; // Set min to a large value
            for (i = 0; i <= k; i++) {
                cv = marked[i];
                for (j = 0; j < n; j++) {
                    if (a[cv][j] == 1 && !visited(j)) {
                        start = cv;
                        end = j;
                        break;
                    }
                }
                if (j < n) break;
            }
            marked[++k] = end;
            distance += min;
        }
        sink[start][end] = 1;
        sink[end][start] = 1;
        edges++;
    }

    printf("\n\nThe sink tree is\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            printf("%3d", sink[i][j]);
        printf("\n");
    }

    broadcast();
    return 0;
}

int visited(int x) {
    int i;
    for (i = 0; i <= k; i++)
        if (marked[i] == x)
            return 1;
    return 0;
}

void broadcast() {
    int i, root, broadcast[MAX][MAX], front = 0, rear = 0, j, b[30];
    printf("Enter the root node: ");
    scanf("%d", &root);

    // Initialize the broadcast matrix to zero
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            broadcast[i][j] = 0;
        }
    }

    for (i = 0; i < n; i++) {
        if (a[root][i] == 1 && sink[root][i] == 1) {
            b[rear++] = i;
            broadcast[root][i] = 2;
        } else if (a[root][i] == 1 && sink[root][i] == 0) {
            broadcast[root][i] = 1;
        } else {
            broadcast[root][i] = 0;
        }
    }

    while (front < rear) {
        root = b[front];
        front++;
        for (i = 0; i < n; i++) {
            if (a[root][i] == 1 && sink[root][i] == 1 && broadcast[i][root] != 2) {
                b[rear++] = i;
                broadcast[root][i] = 2;
            } else if (a[root][i] == 1 && sink[root][i] == 0) {
                broadcast[root][i] = 1;
            } else {
                broadcast[root][i] = 0;
            }
        }
    }

    printf("\n\nThe broadcast tree is (2->CircleNode, 1->Uncircled Node)\n\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("%3d", broadcast[i][j]);
        }
        printf("\n");
    }
